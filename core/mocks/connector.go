// Code generated by MockGen. DO NOT EDIT.
// Source: connector.go

// Package mocks is a generated GoMock package.
package mocks

import (
	core "github.com/guiflemes/ohmychat/core"
	message "github.com/guiflemes/ohmychat/message"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockConnector is a mock of Connector interface.
type MockConnector struct {
	ctrl     *gomock.Controller
	recorder *MockConnectorMockRecorder
}

// MockConnectorMockRecorder is the mock recorder for MockConnector.
type MockConnectorMockRecorder struct {
	mock *MockConnector
}

// NewMockConnector creates a new mock instance.
func NewMockConnector(ctrl *gomock.Controller) *MockConnector {
	mock := &MockConnector{ctrl: ctrl}
	mock.recorder = &MockConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnector) EXPECT() *MockConnectorMockRecorder {
	return m.recorder
}

// Acquire mocks base method.
func (m *MockConnector) Acquire(ctx *core.ChatContext, input chan<- message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Acquire", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Acquire indicates an expected call of Acquire.
func (mr *MockConnectorMockRecorder) Acquire(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Acquire", reflect.TypeOf((*MockConnector)(nil).Acquire), ctx, input)
}

// Dispatch mocks base method.
func (m *MockConnector) Dispatch(message message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dispatch", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Dispatch indicates an expected call of Dispatch.
func (mr *MockConnectorMockRecorder) Dispatch(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dispatch", reflect.TypeOf((*MockConnector)(nil).Dispatch), message)
}
